import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# 创建数据框
data = {
    '年份': [2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020],
    '总税利（万元）': [213913.48, 277675.64, 325768.99, 389329.03, 431336.69, 416384.58, 417650.89, 388351.09, 408955.51, 393385.2],
    '总税利增长率': [0.098, 0.2981, 0.1732, 0.1951, 0.1079, -0.0347, 0.003, -0.0702, 0.0531, -0.0381],
    '卷烟税利（万元）': [58422.77, 63517.09, 70412.64, 85005.33, 100250.13, 103682.94, 110021.33, 114374.96, 123034.66, 135544.29],
    '卷烟税利增长率': [0.3244, 0.0872, 0.1086, 0.2072, 0.1793, 0.0342, 0.0611, 0.0396, 0.0757, 0.1017],
    '单箱增长率': [0.0665, 0.1137, 0.0961, 0.0869, 0.0648, 0.0541, 0.447, 0.0498, 0.065, 0.0658],
    '全州GDP增速': [0.152, 0.138, 0.102, 0.085, 0.09, 0.06, 0.053, 0.04, 0.073, 0.039],
    '城镇可支配收入增速': [0.157, 0.152, 0.094, 0.088, 0.077, 0.0078, 0.085, 0.08, 0.086, 0.048],
    '农村可支配收入增速': [0.213, 0.159, 0.146, 0.123, 0.113, 0.1, 0.101, 0.099, 0.108, 0.095],
    '全国单箱（元）': [20929, 23287, 24963, 26652, 28566, 29166, 30288, 31588, 32812, 33987],
    '全国单箱增长率': [0.156, 0.1147, 0.0725, 0.067, 0.0718, 0.0209, 0.0385, 0.0428, 0.0387, 0.0358],
    '全省单箱（元）': [23269, 26178, 28246, 30458, 31636, 32606, 34138, 36068, 37329, 38945],
    '全省单箱增长率': [0.17, 0.125, 0.079, 0.073, 0.0783, 0.0387, 0.0306, 0.0462, 0.0565, 0.035],
    '全州单箱增长率': [0.1546, 0.1137, 0.0961, 0.0869, 0.0648, 0.0541, 0.0447, 0.0498, 0.065, 0.0658],
    '地区生产总值（万元）': [10001275, 11226693, 1214022, 13143033, 13148366, 14039192, 14809136, 15331939, 16762995, 17331465],
    '第三产业增加值（万元）': [2820021, 3160070, 3383091, 3676145, 4026120, 4390559, 5625078, 6124536, 7488497, 7668555],
    '社会消费品零售总额（万元）': [2879371, 3471364, 3970056, 4281522, 4972454, 5513824, 6162785, 6495777, 7155001, 6782290],
    '居民食品消费支出（万元）': [214953, 259019, 296317, 319430, 381502, 445662, 462561, 300559, 256857, 256505],
    'CPI指数（居民消费价格指数）': [99, 101.6, 100.4, 102.2, 101, 102.2, 101, 101.4, 107, 100.5],
    '去年全省单箱(元)': [19888, 23269, 26178, 28246, 30458, 31636, 32606, 34138, 36068, 37329]
}


df = pd.DataFrame(data)

# 准备训练集和测试集
train_data = df[df['年份'] < 2020]
test_data = df[df['年份'] == 2020]

# 确定自变量（特征）和因变量（要预测的值）
features = ['年份', '总税利（万元）', '总税利增长率', '卷烟税利（万元）', '卷烟税利增长率',
    '单箱增长率', '全州GDP增速', '城镇可支配收入增速', '农村可支配收入增速', '全国单箱（元）',
    '全国单箱增长率', '全省单箱增长率', '全州单箱增长率', '地区生产总值（万元）', 
    '第三产业增加值（万元）', '社会消费品零售总额（万元）', '居民食品消费支出（万元）', 'CPI指数（居民消费价格指数）', '去年全省单箱(元)']
target = '全省单箱（元）'

X_train = train_data[features]
y_train = train_data[target]
X_test = test_data[features]
y_test = test_data[target]

# 训练多元线性回归模型
model = LinearRegression()
model.fit(X_train, y_train)

# 模型评估
y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error (MSE): {mse:.2f}')
print(f'R-squared (R2): {r2:.2f}')

# 输出模型系数
coefficients = pd.DataFrame({'Feature': features, 'Coefficient': model.coef_})
print(coefficients)

# 输出截距
intercept = model.intercept_
print(f'Intercept (截距): {intercept:.2f}')
